{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# üçΩÔ∏è Proyecto Chef AI: Generador de Recetas e Im√°genes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Este Jupyter Notebook contiene un script Python interactivo para generar recetas de cocina a partir de ingredientes o el nombre de un plato, y luego crear una imagen visual del plato generado. Utiliza la API de Google Gemini para la inteligencia artificial y la generaci√≥n de im√°genes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---",
    "",
    "## üì¶ Importaciones Necesarias",
    "",
    "Aqu√≠ importamos las librer√≠as esenciales para interactuar con la API de Google Gemini, manipular im√°genes (PIL) y manejar datos binarios (`BytesIO`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from google import genai\n",
    "from google.genai import types\n",
    "from PIL import Image\n",
    "from io import BytesIO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---",
    "",
    "## üîë Configuraci√≥n del Cliente Gemini",
    "",
    "**Importante:** Aseg√∫rate de reemplazar `\"PONER API\"` con tu **clave de API real** de Google Gemini."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "client = genai.Client(api_key=\"PONER API\") # <--- Pega tu API Key aqu√≠"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---",
    "",
    "## üçé Funci√≥n: Generar Receta a partir de Ingredientes",
    "",
    "Esta funci√≥n act√∫a como un chef virtual, creando una receta detallada basada en los ingredientes que le proporcionas. Puedes especificar preferencias diet√©ticas y el nivel de dificultad."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generar_receta_por_ingredientes(ingredientes: str, preferencias: str = \"\", dificultad: str = \"intermedia\") -> tuple[str, str]:\n",
    "    prompt = f\"\"\"\n",
    "    Sos un chef profesional especializado en recetas caseras y saludables.\n",
    "    Con los siguientes ingredientes:\n",
    "    {ingredientes}\n",
    "    Gener√° una receta que sea {preferencias if preferencias else \"sin restricciones dietarias\"},\n",
    "    de dificultad {dificultad}, pensada para una comida rica y pr√°ctica.\n",
    "    Escrib√≠ un t√≠tulo, una breve descripci√≥n, los ingredientes detallados y los pasos de preparaci√≥n. Us√° un lenguaje claro y simple.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        respuesta = client.models.generate_content(\n",
    "            model=\"gemini-1.5-flash\",\n",
    "            contents=prompt\n",
    "        )\n",
    "        receta = respuesta.text\n",
    "        titulo = receta.strip().split('\\n')[0]\n",
    "        return receta, titulo\n",
    "    except Exception as e:\n",
    "        print(f\"Error al generar la receta por ingredientes: {e}\")\n",
    "        return \"No se pudo generar la receta por ingredientes.\", \"Error\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---",
    "",
    "## üçù Funci√≥n: Generar Receta por Nombre de Plato",
    "",
    "Si ya sabes qu√© plato quieres preparar, esta funci√≥n te ayuda a obtener una receta completa y detallada para √©l."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generar_receta_por_plato(nombre_plato: str, preferencias: str = \"\", dificultad: str = \"intermedia\") -> tuple[str, str]:\n",
    "    prompt = f\"\"\"\n",
    "    Eres un chef profesional especializado en crear recetas detalladas y caseras.\n",
    "    Dado el nombre del plato: \"{nombre_plato}\".\n",
    "    Por favor, genera una receta completa que incluya:\n",
    "    1. Un t√≠tulo claro y atractivo para el plato.\n",
    "    2. Una breve descripci√≥n del plato.\n",
    "    3. Una lista detallada de **todos los ingredientes necesarios**, con cantidades precisas.\n",
    "    4. Los pasos de preparaci√≥n numerados, claros y f√°ciles de seguir.\n",
    "    Considera las siguientes especificaciones:\n",
    "    - Preferencias diet√©ticas: {preferencias if preferencias else \"ninguna\"}\n",
    "    - Dificultad de la receta: {dificultad}\n",
    "    - Usa un lenguaje claro y conciso, como si fuera para un libro de cocina.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        respuesta = client.models.generate_content(\n",
    "            model=\"gemini-1.5-flash\",\n",
    "            contents=prompt\n",
    "        )\n",
    "        receta = respuesta.text\n",
    "        titulo = receta.strip().split('\\n')[0]\n",
    "        return receta, titulo\n",
    "    except Exception as e:\n",
    "        print(f\"Error al generar la receta para '{nombre_plato}': {e}\")\n",
    "        return \"No se pudo generar la receta para el plato.\", \"Error\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---",
    "",
    "## üì∏ Funci√≥n: Generar Imagen a partir del T√≠tulo de la Receta",
    "",
    "Una vez que tienes la receta, esta funci√≥n utiliza el t√≠tulo para generar una imagen visual atractiva del plato."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generar_imagen_desde_titulo(titulo_receta: str):\n",
    "    prompt_imagen = (\n",
    "        f\"Create a high-quality 3D-rendered image of a delicious homemade dish titled '{titulo_receta}'. \"\n",
    "        \"The image should look like professional editorial food photography: well-presented on a rustic table, \"\n",
    "        \"with soft natural lighting, shallow depth of field, and a clean, warm background. The dish should look fresh, realistic, and inviting.\"\n",
    "    )\n",
    "    try:\n",
    "        response = client.models.generate_content(\n",
    "            model=\"gemini-2.0-flash-preview-image-generation\",\n",
    "            contents=[prompt_imagen],\n",
    "            config=types.GenerateContentConfig(\n",
    "                response_modalities=['TEXT', 'IMAGE']\n",
    "            )\n",
    "        )\n",
    "        imagen_generada_y_guardada = False\n",
    "        for part in response.candidates[0].content.parts:\n",
    "            if part.text is not None:\n",
    "                print(f\"üìù Descripci√≥n extra del modelo para la imagen:\\n{part.text}\")\n",
    "            elif part.inline_data is not None:\n",
    "                image_data = part.inline_data.data\n",
    "                image = Image.open(BytesIO(image_data))\n",
    "                file_name_clean = \"\".join(c for c in titulo_receta if c.isalnum() or c in (' ', '_', '-')).lower().replace(' ', '_')\n",
    "                final_file_name = f\"promptchef_imagen_{file_name_clean}.png\"\n",
    "                image.save(final_file_name)\n",
    "                print(f\"üñºÔ∏è Imagen guardada como {final_file_name}\")\n",
    "                image.show()\n",
    "                imagen_generada_y_guardada = True\n",
    "\n",
    "        if not imagen_generada_y_guardada:\n",
    "            print(\"No se pudo obtener la imagen. La respuesta no contiene datos de imagen esperados.\")\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Error al generar la imagen: {e}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---",
    "",
    "## ‚ñ∂Ô∏è Ejecuci√≥n Principal",
    "",
    "Aqu√≠ es donde se ejecuta la l√≥gica principal del script. Puedes configurar si deseas generar una receta por ingredientes o por el nombre de un plato, y tambi√©n ajustar preferencias diet√©ticas y la dificultad."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    # --- Configuraci√≥n de Entrada ---\n",
    "    # Para elegir el modo, simplemente asigna un valor a uno y deja el otro como \"\" (cadena vac√≠a)\n",
    "\n",
    "    # EJEMPLO 1: Generar por INGREDIENTES\n",
    "    # ingredientes_para_receta = \"papa, morr√≥n, huevo, queso, carne\"\n",
    "    # plato_deseado_para_receta = \"\"\n",
    "\n",
    "    # EJEMPLO 2: Generar por NOMBRE DE PLATO\n",
    "    # ingredientes_para_receta = \"\"\n",
    "    # plato_deseado_para_receta = \" Lasagna de Carne\"\n",
    "\n",
    "    # AQUI SELECCIONAS LO QUE TIENES EN LA HELADERA O LO QUE QUIERAS COMER\n",
    "    ingredientes_para_receta = \"papa, huevo ,panceta, queso\"\n",
    "    plato_deseado_para_receta = \"\"\n",
    "\n",
    "    # Configuraci√≥n de preferencias y dificultad (se aplica a ambos escenarios)\n",
    "    preferencias_receta = \"\" # Ejemplo: \"sin gluten\", \"vegetariana\"\n",
    "    dificultad_receta = \"intermedio\" # Ejemplo: \"f√°cil\", \"intermedia\", \"avanzada\"\n",
    "\n",
    "\n",
    "    # --- L√≥gica de Generaci√≥n Autom√°tica ---\n",
    "    receta_generada = \"\"\n",
    "    titulo_receta = \"\"\n",
    "    tipo_de_generacion = \"\"\n",
    "\n",
    "    if plato_deseado_para_receta:\n",
    "        print(f\"üßë‚Äçüç≥ Generando receta para: '{plato_deseado_para_receta}'...\")\n",
    "        receta_generada, titulo_receta = generar_receta_por_plato(\n",
    "            plato_deseado_para_receta, preferencias_receta, dificultad_receta\n",
    "        )\n",
    "        tipo_de_generacion = \"por nombre de plato\"\n",
    "    elif ingredientes_para_receta:\n",
    "        print(\"üßë‚Äçüç≥ Generando receta a partir de ingredientes...\")\n",
    "        receta_generada, titulo_receta = generar_receta_por_ingredientes(\n",
    "            ingredientes_para_receta, preferencias_receta, dificultad_receta\n",
    "        )\n",
    "        tipo_de_generacion = \"por ingredientes\"\n",
    "    else:\n",
    "        print(\"ü§î Por favor, especifica ingredientes o un nombre de plato para generar una receta.\")\n",
    "\n",
    "    # --- Procesamiento de la Receta y Generaci√≥n de Imagen (si la receta fue generada) ---\n",
    "    if tipo_de_generacion: # Solo si se intent√≥ generar una receta\n",
    "        if \"Error\" not in titulo_receta:\n",
    "            print(f\"\\nüìÑ RECETA GENERADA ({tipo_de_generacion}):\\n\")\n",
    "            print(receta_generada)\n",
    "\n",
    "            print(\"\\nüñºÔ∏è Generando imagen del plato...\\n\")\n",
    "            generar_imagen_desde_titulo(titulo_receta)\n",
    "        else:\n",
    "            print(f\"‚ùå No se pudo proceder con la generaci√≥n de la imagen debido a un error en la receta ({tipo_de_generacion}).\")\n",
    "\n",
    "    print(\"\\n--- Fin de la generaci√≥n de recetas ---\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
